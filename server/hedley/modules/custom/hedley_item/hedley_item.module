<?php

/**
 * @file
 * Code for the Hedley item feature.
 */

include_once 'hedley_item.features.inc';

/**
 * Implements hook_node_insert().
 */
function hedley_item_node_insert($node) {
  if ($node->type != 'item') {
    return;
  }

  hedley_item_trigger_pusher_on_item_data_change($node);
}

/**
 * Implements hook_node_update().
 */
function hedley_item_node_update($node) {
  if ($node->type != 'item') {
    return;
  }

  // Make sure we get updated data.
  entity_get_controller('node')->resetCache([$node->nid]);
  hedley_item_trigger_pusher_on_item_data_change($node);
}

/**
 * Trigger a pusher event for a Item data.
 *
 * @param object $node
 *   A Item data node type.
 */
function hedley_item_trigger_pusher_on_item_data_change($node) {
  if ($node->status == NODE_NOT_PUBLISHED) {
    // Node is not published.
    return;
  }

  // Load the item view from restful, as the item author.
  $handler = restful_get_restful_handler('items');
  $handler->setAccount(user_load($node->uid));
  $data = $handler->get($node->nid);
  // Remove the private note, in case the author is an admin.
  if (array_key_exists('private_note', $data[0])) {
    unset($data[0]['private_note']);
  }
  hedley_pusher_trigger_event('general', 'item__update', $data[0]);

  // Send an event to the private channel, with the private note field.
  $wrapper = entity_metadata_wrapper('node', $node);
  $data[0]['private_note'] = $wrapper->field_private_note->value();
  hedley_pusher_trigger_event('private-general', 'item__update', $data[0]);
}

/**
 * Implements hook_permission().
 */
function hedley_item_permission() {
  return [
    'access private fields' => [
      'title' => t('Access private fields.'),
    ],
  ];
}

/**
 * Implements hook_field_access().
 */
function hedley_item_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['field_name'] == 'field_private_note') {
    return user_access('access private fields', $account);
  }
}
